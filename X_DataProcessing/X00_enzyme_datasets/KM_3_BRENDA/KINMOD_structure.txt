1)  introduce properties to the table:

## first Compounds properties
 INSERT INTO main (cid,iid,`row`,refv,StrV,`comment`) VALUES  
(5,1,1,0,"NAME","Compound_Properties"), 
(5,2,1,0,"PUBCHEM_CID","Compound_Properties"), 
(5,3,1,0,"SYNONYMES","Compound_Properties"), 
(5,4,1,0,"MOLECULARWEIGHT","Compound_Properties"), 
(5,5,1,0,"CHEMICALFORMULA","Compound_Properties"), 
(5,6,1,0,"SMILES","Compound_Properties"), 
(5,7,1,0,"INCHIKEY","Compound_Properties"), 
(5,8,1,0,"INCHI","Compound_Properties"), 
(5,9,1,0,"CHARGE","Compound_Properties"), 
(5,10,1,0,"INHIBITOR","Compound_Properties"), 
(5,11,1,0,"ACTIVATOR","Compound_Properties"), 
(5,12,1,0,"COFACTOR","Compound_Properties"), 
(5,13,1,0,"BIO-COMPOUND","Compound_Properties"), 
(5,14,1,0,"CHEMICAL_COMPOUND","Compound_Properties"), 
('5', '15', '1', '0', "UNIQUE_KEY","Compound_Properties"),
(5,25,1,0,"SOURCE_DB","Compound_Properties") 

## enzyme properties
INSERT INTO main (cid,iid,`row`,refv,StrV,`comment`) VALUES  
(5,1,1,0,"RECOMMENDED_NAME","Enzyme_Properties"),
(5,2,1,0,"SYSTEMATIC_NAME","Enzyme_Properties"),
(5,3,1,0,"SYNONYM","Enzyme_Properties"),
(5,4,1,0,"MOLECULAR_WEIGHT","Enzyme_Properties"),
(5,5,1,0,"ECNUMBER","Enzyme_Properties"),
(5,6,1,0,"MICROORGANISM","Enzyme_Properties"),
(5,7,1,0,"SOURCE_TISSUE","Enzyme_Properties"),
(5,8,1,0,"LOCALIZATION","Enzyme_Properties"),
(5,9,1,0,"PH_OPTIMUM","Enzyme_Properties"),
(5,10,1,0,"PH_RANGE","Enzyme_Properties"),
(5,11,1,0,"SPECIFIC_ACTIVITY","Enzyme_Properties"),
(5,12,1,0,"TEMPERATURE_OPTIMUM","Enzyme_Properties"),
(5,13,1,0,"TEMPERATURE_RANGE","Enzyme_Properties"),
(5,14,1,0,"ACTIVATING_COMPOUND","Enzyme_Properties"),
(5,15,1,0,"INHIBITORS","Enzyme_Properties"),
(5,16,1,0,"KI_VALUE","Enzyme_Properties"),
(5,17,1,0,"METALS_IONS","Enzyme_Properties"),
(5,18,1,0,"SUBUNITS","Enzyme_Properties"),
(5,19,1,0,"PI_VALUE","Enzyme_Properties"),
(5,20,1,0,"APPLICATION","Enzyme_Properties"),
(5,21,1,0,"ENGINEERING","Enzyme_Properties"),
(5,22,1,0,"CLONED","Enzyme_Properties"),
(5,23,1,0,"CRYSTALLIZATION","Enzyme_Properties"),
(5,24,1,0,"KCAT_KM_VALUE","Enzyme_Properties"),
(5,25,1,0,"SOURCE_DB","Enzyme_Properties")

2) INTRODUCE COMPOUNDS BASED ON THE UNIQUE_KEY TABLE:
INSERT INTO main (CID,IID,`ROW`,REFV, strv_hashed) 
SELECT 4,ID,1,0, md5(concat(cid)) FROM unique_key ORDER BY ID; 

## LINKE UNIQUE_KEY
INSERT INTO main (CID,IID,`ROW`,REFV,STRV, strv_hashed) 
SELECT 5,15,1,T2.UID,T1.Unique_Key, md5(T1.Unique_Key) 
FROM unique_key T1 INNER JOIN main T2 ON T1.ID=T2.IID WHERE T2.CID = 4; 

## LINE INCHIKEY
		CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_INCHIKEY`()
		BEGIN 
		CREATE TABLE IF NOT EXISTS debuger(ID INT UNSIGNED KEY);
		CREATE TEMPORARY TABLE main_temp like main; 
		SET @COUNTER = (SELECT MAX(ID) FROM debuger)-10; 
		IF @COUNTER IS NULL THEN
		    SET @COUNTER = 1;
		END IF;
		 
		WHILE @COUNTER <= (SELECT MAX(ID) FROM unique_key) DO
		    DROP TEMPORARY TABLE IF EXISTS TEMP;
		    CREATE TEMPORARY TABLE TEMP (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV VARCHAR(500));
		    
		    INSERT INTO TEMP(IID,STRV)
		        SELECT T2.ID, T1.INCHIKEY FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
		            WHERE T2.ID = @COUNTER;
		    
		    INSERT IGNORE INTO main_temp (CID,IID,`ROW`,REFV,STRV)
		        SELECT 5,7,T1.ID,T2.UID,T1.STRV FROM TEMP T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
		        
		    INSERT IGNORE INTO debuger SELECT @COUNTER;
		    SET @COUNTER = @COUNTER + 1;
		END WHILE;
		       INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV)
		       select CID,IID,`ROW`,REFV,STRV from main_temp;
		END
	***** DEBUGER QUERY FOR INCHIKEY
		SELECT MAX(T2.ID), MAX(T1.ID) FROM unique_key T1, debuger T2;
	
		SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN
		(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 7 AND REFV !=0);
		
## LINKE CHEMICAL FORMULA

		SET SQL_SAFE_UPDATES = 0;
		 
		CREATE TABLE IF NOT EXISTS debuger4(ID INT UNSIGNED KEY);
		CREATE TEMPORARY TABLE main_temp4 like main;
		 
		SET @COUNTER4 = (SELECT MAX(ID) FROM debuger4)-10;
		 
		IF @COUNTER4 IS NULL THEN
		    SET @COUNTER4 = 1;
		END IF;
		  
		WHILE @COUNTER4 <= (SELECT MAX(ID) FROM unique_key) DO
		    DROP TEMPORARY TABLE IF EXISTS TEMP4;
		    CREATE TEMPORARY TABLE TEMP4 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV VARCHAR(500));
		 
		    
		    INSERT INTO TEMP4(IID,STRV)
		        SELECT T2.ID, T1.COMPOUND_FORMULS FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
		            WHERE T2.ID = @COUNTER4;
		    
		    INSERT IGNORE INTO main_temp4 (CID,IID,`ROW`,REFV,STRV)
		        SELECT 5,5,T1.ID,T2.UID,T1.STRV FROM TEMP4 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
		        
		    INSERT IGNORE INTO debuger4 SELECT @COUNTER4;
		    SET @COUNTER4 = @COUNTER4 + 1;
		END WHILE;
		 
		INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV)
		select CID,IID,`ROW`,REFV,STRV from main_temp4;
       
***** DEBUGER QUERY FOR CHEMICAL FORMULA
		SELECT MAX(T2.ID), MAX(T1.ID) FROM unique_key T1, debuger4 T2;
		SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN  
		(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 5 AND REFV !=0);  

## LINKE MW
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_MW_5`()
		BEGIN
		 
		SET SQL_SAFE_UPDATES = 0;
		 
		CREATE TABLE IF NOT EXISTS debuger5(ID INT UNSIGNED KEY);
		CREATE TEMPORARY TABLE main_temp5 like main;
		 
		 
		SET @COUNTER5 = (SELECT MAX(ID) FROM debuger5)-10;
		 
		 
		IF @COUNTER5 IS NULL THEN
		    SET @COUNTER5 = 1;
		END IF;
		 
		 
		WHILE @COUNTER5 <= (SELECT MAX(ID) FROM unique_key) DO
		    DROP TEMPORARY TABLE IF EXISTS TEMP5;
		    CREATE TEMPORARY TABLE TEMP5 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV FLOAT);
		    
		    INSERT INTO TEMP5(IID,STRV)
		        SELECT DISTINCT T2.ID, T1.MW FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
		            WHERE T2.ID = @COUNTER5;
		    
		    INSERT IGNORE INTO main (CID,IID,`ROW`,REFV,floatV)
		        SELECT 5,4,T1.ID,T2.UID,T1.STRV FROM TEMP5 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
		        
		    INSERT IGNORE INTO debuger5 SELECT @COUNTER5;
		    SET @COUNTER5 = @COUNTER5 + 1;
		END WHILE;
		 
		     INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV)
		        SELECT CID,IID,`ROW`,REFV,STRV FROM main_temp5;
		        
		       DROP TEMPORARY TABLE main_temp5;
		       DROP TEMPORARY TABLE TEMP5;
		END
***** DEBUGER QUERY FOR MW

		SELECT MAX(T2.ID), MAX(T1.ID) FROM unique_key T1, debuger5 T2;
		
		SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN 
		(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 4 AND REFV !=0); 


### INSERT PUBCHEM_CID INTO MAIN
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_CID_2`()
BEGIN
 
 
CREATE TABLE IF NOT EXISTS debuger2(ID INT UNSIGNED KEY);
CREATE TABLE main_temp2 like main;
 
SET @COUNTER2 = (SELECT MAX(ID) FROM debuger2)-1;
 
IF @COUNTER2 IS NULL THEN
    SET @COUNTER2 = 1;
END IF;
 
WHILE @COUNTER2 <= (SELECT MAX(ID) FROM unique_key) DO
    DROP temporary TABLE IF EXISTS TEMP2;
    CREATE temporary TABLE TEMP2 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV VARCHAR(500));
    
    INSERT INTO TEMP2(IID,STRV)
        SELECT T2.ID, T1.CID FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
            WHERE T2.ID = @COUNTER2;
    
    INSERT IGNORE INTO main_temp2 (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,2,T1.ID,T2.UID,T1.STRV FROM TEMP2 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    INSERT IGNORE INTO debuger2 SELECT @COUNTER2;
    SET @COUNTER2 = @COUNTER2 + 1;
END WHILE;
       INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
       select CID,IID,`ROW`,REFV,CONCAT('CID',STRV), MD5(STRV) from main_temp2;
END
***** DEBUGER QUERY FOR PUBCHEM_CID
SELECT MAX(T2.ID), MAX(T1.ID) FROM unique_key T1, debuger2 T2;

SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN 
(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 2 AND REFV !=0); 

### INSERT CHARGE INTO THE TABLE
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_CHARGE_3`()
BEGIN
 
DROP TABLE IF EXISTS main_temp3; 
CREATE TABLE main_temp3 like main;
 
# SET @COUNTER3 = (SELECT MAX(ID) FROM debuger3)-10;
SET @COUNTER3 = NULL;
IF @COUNTER3 IS NULL THEN
    SET @COUNTER3 = 1;
END IF;
 
WHILE @COUNTER3 <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP3;
    CREATE TEMPORARY TABLE TEMP3 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, FLOATV float);
    
    INSERT INTO TEMP3(IID,FLOATV)
        SELECT T2.ID, T1.CHARGE FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
            WHERE T2.ID = @COUNTER3;
    
    INSERT IGNORE INTO main_temp3 (CID,IID,`ROW`,REFV,FLOATV)
        SELECT 5,9,T1.ID,T2.UID,T1.FLOATV FROM TEMP3 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    SET @COUNTER3 = @COUNTER3 + 1;
    SELECT @COUNTER3;
END WHILE;
       INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,FLOATV)
       select CID,IID,`ROW`,REFV,FLOATV from main_temp3;
       
END
***** DEBUGER QUERY FOR CHARGE
SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN 
(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 9 AND REFV !=0); 

### MODIFY MAIN DEFINITION TABLE
UPDATE main T1 INNER JOIN main T2 ON T1.UID = T2.UID SET T1.STRV_HASHED = MD5(T2.STRV) WHERE T2.STRV IS NOT NULL;
UPDATE main T1 INNER JOIN main T2 ON T1.UID = T2.UID SET T1.STRV_HASHED = NULL WHERE T2.CID = 5 AND T2.REFV = 0;


## INSERT SMILES INTO MAIN TABLE;
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_SMILES`()
BEGIN
 
DROP TABLE IF EXISTS main_temp; 
CREATE TABLE main_temp like main;
 
SET @COUNTER = NULL;
IF @COUNTER IS NULL THEN
    SET @COUNTER = 1;
END IF;
 
WHILE @COUNTER <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP;
    CREATE TEMPORARY TABLE TEMP (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV TEXT(764));
    
    INSERT INTO TEMP(IID,STRV)
        SELECT DISTINCT T2.ID, T1.SMILES FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
            WHERE T2.ID = @COUNTER;
    
    INSERT IGNORE INTO main_temp (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,6,T1.ID,T2.UID,T1.STRV FROM TEMP T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    SET @COUNTER = @COUNTER + 1;
    SELECT @COUNTER;
END WHILE;
 
   INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
   select CID,IID,`ROW`,REFV,STRV, MD5(STRV) from main_temp;
   
   DROP TABLE main_temp;
END

***** DEBUGER QUERY FOR SMILES


### INSERT INCHI INTO THE TABLE IS SIMILAR TO SMILES
CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERT_INCHI`()
BEGIN
 
DROP TABLE IF EXISTS main_temp1; 
CREATE TABLE main_temp1 like main;
 
SET @COUNTER1 = NULL;
IF @COUNTER1 IS NULL THEN
    SET @COUNTER1 = 1;
END IF;
 
WHILE @COUNTER1 <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP;
    CREATE TEMPORARY TABLE TEMP (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV TEXT(764));
    
    INSERT INTO TEMP(IID,STRV)
        SELECT DISTINCT T2.ID, T1.CID FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
            WHERE T2.ID = @COUNTER1;
    
    INSERT IGNORE INTO main_temp1 (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,2,T1.ID,T2.UID,T1.STRV FROM TEMP T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    SET @COUNTER1 = @COUNTER1 + 1;
    SELECT @COUNTER1;
END WHILE;
 
   INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
   select CID,IID,`ROW`,REFV,STRV, MD5(STRV) from main_temp1;
   
   DROP TABLE main_temp1;
END

## INSERT SOURCE DB INTO TABLE QUERY IS BELOW
INSERT IGNORE INTO main (CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
SELECT DISTINCT 5,25,1,T2.REFV,"Brenda",MD5("Brenda") FROM property T1, main T2 WHERE T1.ID = T2.IID AND T2.CID = 5 AND REFV != 0

## INSERT NAME INTO TABLE

CREATE DEFINER=`root`@`localhost` PROCEDURE `INSERET_NAME`()
BEGIN
 
 
DROP TABLE IF EXISTS main_temp; 
CREATE TABLE main_temp like main;
 
SET @COUNTER = NULL;
IF @COUNTER IS NULL THEN
    SET @COUNTER = 1;
END IF;
 
WHILE @COUNTER <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP;
    CREATE TEMPORARY TABLE TEMP (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV TEXT(764));
    
    INSERT INTO TEMP(IID,STRV)
        SELECT DISTINCT T2.ID, T1.COMPOUND FROM property T1 INNER JOIN unique_key T2 ON T1.unique_key=T2.unique_key
            WHERE T2.ID = @COUNTER;
    
    INSERT IGNORE INTO main_temp (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,1,T1.ID,T2.UID,T1.STRV FROM TEMP T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    SET @COUNTER = @COUNTER + 1;
    SELECT @COUNTER;
END WHILE;
 
   INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
   select CID,IID,`ROW`,REFV,STRV, MD5(STRV) from main_temp;
   
   DROP TABLE main_temp;
   
END
***** DEBUGER QUERY FOR NAME
SELECT UID AS R FROM main WHERE CID = 4 AND REFV = 0 AND UID NOT IN 
(SELECT REFV AS R FROM main WHERE CID = 5 AND IID = 1 AND REFV !=0); 


## INSERT BIO COMPOUND FLAG INTO THE TABLE 
INSERT IGNORE INTO main (CID,IID,`ROW`,REFV) 
SELECT DISTINCT 5,13,1,T2.REFV 
FROM property T1, main T2 WHERE T1.ID = T2.IID AND T2.CID = 5 AND REFV != 0;

## INSERT COMPOUND SYNONYMS INTO TABLE;
 DROP TABLE IF EXISTS main_TEMP22; 
CREATE TABLE main_TEMP22 like main;
 
SET @COUNTER2 = NULL;
IF @COUNTER2 IS NULL THEN
    SET @COUNTER2 = 1;
END IF;
 
WHILE @COUNTER2 <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP2;
    CREATE TEMPORARY TABLE TEMP2 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV TEXT(764));
    
    INSERT INTO TEMP2(IID,STRV)
    SELECT DISTINCT T3.id,T2.synonym FROM property T1 INNER JOIN 
        synonym T2 ON T1.COMPOUND=T2.COMPOUND INNER JOIN unique_key T3 ON T3.Unique_Key=T1.Unique_Key 
        WHERE T3.ID=@COUNTER2;
    
    INSERT IGNORE INTO main_TEMP22 (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,3,T1.ID,T2.UID,T1.STRV FROM TEMP2 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
        
    SET @COUNTER2 = @COUNTER2 + 1;
    SELECT @COUNTER2;
END WHILE;
 
   INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
   select CID,IID,`ROW`,REFV,STRV, MD5(STRV) from main_TEMP22;


## INSERT KEGG IDENTIFIERS INTO TABLE;
DROP TABLE IF EXISTS main_TEMP33; 
CREATE TABLE main_TEMP33 like main;
 
SET @COUNTER3 = NULL;
IF @COUNTER3 IS NULL THEN
    SET @COUNTER3 = 1;
END IF;
 
WHILE @COUNTER3 <= (SELECT MAX(ID) FROM unique_key) DO
    DROP TEMPORARY TABLE IF EXISTS TEMP3;
    CREATE TEMPORARY TABLE TEMP3 (ID INT UNSIGNED AUTO_INCREMENT PRIMARY KEY, IID INT UNSIGNED, STRV TEXT(764));
    
    INSERT INTO TEMP3(IID,STRV)
        SELECT DISTINCT T3.ID,T1.SYNONYM FROM synonym T1,property T2,unique_key T3 WHERE T1.Compound=T2.Compound AND T3.Unique_Key=T2.Unique_Key
        AND T3.ID = @COUNTER3 HAVING T1.SYNONYM REGEXP '^([C]|[D])\\d\\d\\d\\d\\d$'  = 1;
    
    INSERT IGNORE INTO main_TEMP33 (CID,IID,`ROW`,REFV,STRV)
        SELECT 5,16,T1.ID,T2.UID,T1.STRV FROM TEMP3 T1 INNER JOIN main T2 ON T1.IID=T2.IID AND T2.CID = 4;
       
    SET @COUNTER3 = @COUNTER3 + 1;
    SELECT @COUNTER3;
END WHILE;

   INSERT IGNORE INTO main(CID,IID,`ROW`,REFV,STRV, STRV_HASHED)
   select CID,IID,`ROW`,REFV,STRV, MD5(STRV) from main_TEMP33;
 
   DROP TABLE main_TEMP33;


